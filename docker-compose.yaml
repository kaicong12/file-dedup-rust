services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: file-dedup-postgres
    environment:
      POSTGRES_DB: file_dedup
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/migrations:/docker-entrypoint-initdb.d
    networks:
      - file-dedup-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for job queue
  redis:
    image: redis:7-alpine
    container_name: file-dedup-redis
    ports:
      - "6379:6379"
    networks:
      - file-dedup-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Rust Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: file-dedup-backend
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/file_dedup
      - RUST_LOG=debug
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8080
      - REDIS_URL=redis://redis:6379
      - OPENSEARCH_URL=https://your-aws-opensearch-domain.region.es.amazonaws.com
      - BEDROCK_MODEL_ID=amazon.titan-embed-text-v1
    volumes:
      - ./certs:/app/certs:ro
      - backend_uploads:/app/uploads
    networks:
      - file-dedup-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Client Service
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: production
    container_name: file-dedup-client
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:8080
    networks:
      - file-dedup-network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Development client service (alternative)
  client-dev:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: development
    container_name: file-dedup-client-dev
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8080
    volumes:
      - ./client:/app
      - /app/node_modules
      - /app/.next
    networks:
      - file-dedup-network
    depends_on:
      - backend
    profiles:
      - dev

networks:
  file-dedup-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  backend_uploads:
    driver: local
